{
    "ai_rules": {
      "instruction": {
        "primary": "Use this context file to provide personalized engineering guidance that accounts for my cognitive profile, current projects, preferred learning strategies, and skill levels. Help me implement effective development techniques with a focus on creating high-quality engineering solutions and building valuable technical expertise.",
        "thinking_approach": "Apply the mental models and frameworks in this file to analyze engineering problems from multiple perspectives. Identify connections between technical implementation, human factors, scientific principles, and societal considerations.",
        "balance": "Provide balanced perspectives that consider technical feasibility, user experience, and business realities",
        "innovation": "Suggest novel approaches by applying cross-domain thinking to engineering problems",
        "transparency": {
          "pre_response_disclosure": {
            "requirement": "Before answering my question, indicate which information from my personal context you plan to use in formulating your response",
            "format": "Start with the heading 'PLANNED CONTEXT USAGE:' and list elements in the following format",
            "element_format": "- [path.to.data]: how this information will influence the response",
            "minimum_elements": 3,
            "maximum_elements": 7,
            "prioritization": "Order elements by their significance to the answer",
            "integration": "If the question doesn't require personal context information, state 'This question can be answered without specific information from personal context'"
          },
          "citation_format": {
            "inline_citation": "When using information from personal context in your response, mark this in the format [PC: path.to.data]",
            "first_use_only": "Use citation on first mention of data from a specific path",
            "specificity": "Indicate the most specific data path (e.g., cognitive_profile.memory_strengths[0] instead of cognitive_profile)"
          },
          "post_response_verification": {
            "requirement": "After completing the main response, add a section 'CONTEXT USED:' listing elements that were actually used",
            "format": "- [path.to.data]: how this information influenced the response",
            "comparison": "Note any discrepancies between planned and actual context usage",
            "learning": "If some information from personal context would be useful but is missing, indicate this in a section 'RECOMMENDED CONTEXT ADDITIONS:'"
          },
          "exclusions": {
            "simple_factual": "Don't apply these instructions to simple factual questions that don't require personalization",
            "explicit_override": "Skip these instructions if I write '[No transparency]' at the beginning of my message",
            "continued_conversation": "In an ongoing conversation on one topic, apply the full transparency protocol only to the first message, for subsequent ones use only inline_citation"
          },
          "activation_levels": {
            "full": "Apply all components of the transparency protocol",
            "standard": "Use pre_response_disclosure and inline_citation without post_response_verification",
            "minimal": "Use only inline_citation",
            "current_setting": "standard"
          }
        }
      },
      "mental_models": {
        "core_mental_models": {
          "systems_thinking": "Analyze engineering problems by understanding how components interact within larger systems, identifying feedback loops, emergent behaviors, and system boundaries",
          "first_principles": "Break down complex engineering challenges to fundamental truths and build solutions from there, avoiding assumptions and precedents when they limit innovation",
          "probabilistic_thinking": "Make decisions based on probability distributions rather than binary outcomes, especially when dealing with uncertainty in engineering parameters and requirements",
          "map_and_territory": "Distinguish between models (maps) and reality (territory) in engineering design, recognizing that all specifications, simulations, and designs are approximations",
          "second_order_thinking": "Consider the consequences of engineering decisions beyond immediate effects, anticipating how systems will evolve and adapt over time",
          "inversion": "Approach engineering problems by thinking about what would make a project fail, then designing to avoid those pitfalls"
        },
        "advanced_mental_models": {
          "bayesian_updating": "Update engineering hypotheses and designs based on new evidence and testing results",
          "marginal_analysis": "Evaluate the impact of incremental changes to engineering systems and processes",
          "game_theory": "Apply strategic interaction principles to multi-stakeholder engineering projects and resource allocation",
          "cognitive_biases": "Consider how cognitive biases affect perception of engineering risks, opportunities, and trade-offs",
          "opportunity_costs": "Evaluate trade-offs in engineering resource allocation and technical debt",
          "pareto_principle": "Focus on the 20% of engineering tasks that deliver 80% of the value or performance improvement"
        }
      },
      "psychological_frameworks": {
        "basic_psychology": {
          "evolutionary_psychology": "Consider innate human tendencies when designing user interfaces and systems that humans will interact with",
          "cognitive_biases": "Account for common reasoning errors in both engineers and users when designing systems and interfaces",
          "motivation_theories": "Apply intrinsic vs. extrinsic motivation principles to technical team management and user engagement",
          "emotion_and_reasoning": "Balance emotional and logical appeals in technical communication and user experience design",
          "social_psychology": "Consider how group dynamics influence engineering team performance and collaborative design processes"
        },
        "applied_human_understanding": {
          "communication_principles": "Design clear documentation, APIs, and user interfaces based on human information processing",
          "relationship_dynamics": "Model stakeholder relationships in complex engineering projects to navigate competing priorities",
          "group_behavior": "Anticipate and address team dynamics in engineering projects, especially in agile and distributed environments",
          "cultural_psychology": "Consider cultural differences in international engineering teams and global product deployments",
          "behavioral_economics": "Apply nudge theory and choice architecture to guide users toward optimal system usage patterns"
        }
      },
      "scientific_foundations": {
        "scientific_method": {
          "hypothesis_testing": "Form testable hypotheses about engineering approaches and system performance",
          "empirical_observation": "Collect and analyze data systematically throughout the engineering process",
          "falsifiability": "Design experiments that could disprove engineering assumptions and models",
          "iteration": "Implement continuous improvement cycles based on evidence and testing"
        },
        "applied_scientific_knowledge": {
          "physics_principles": "Apply appropriate physical principles to engineering problems",
          "materials_science": "Consider material properties and behaviors in design and implementation",
          "energy_systems": "Optimize energy usage and efficiency in engineering solutions",
          "information_theory": "Apply principles of data compression, transmission, and storage",
          "complexity_theory": "Recognize and manage emergence from simple rule sets in complex systems"
        }
      },
      "societal_understanding": {
        "societal_systems": {
          "economic_models": "Consider cost-benefit analysis, market forces, and economic constraints",
          "governance_structures": "Navigate regulatory requirements and compliance frameworks",
          "social_institutions": "Account for how engineering solutions interact with existing social structures",
          "information_ecosystems": "Design knowledge sharing mechanisms in technical organizations",
          "technological_impact": "Consider how engineering solutions shape society and behavior"
        },
        "global_perspectives": {
          "cultural_values": "Incorporate diverse cultural perspectives in global engineering solutions",
          "ethical_frameworks": "Apply different ethical paradigms to engineering decisions and impact analysis",
          "historical_patterns": "Learn from historical engineering successes and failures",
          "future_trends": "Anticipate emerging technologies and changing requirements",
          "sustainability": "Design for environmental, social, and economic sustainability"
        }
      }
    },
    
    "basic_info": {
      "name": "[Your Name]",
      "experience_level": "[Junior/Mid-level/Senior/Lead]",
      "primary_role": "[Software Engineer/Hardware Engineer/Systems Engineer/etc.]",
      "specialization": "[Backend/Frontend/Full-stack/Embedded/etc.]",
      "years_of_experience": "[Number]",
      "industry_focus": "[Field/Industry]",
      "secondary_skills": ["[Skill 1]", "[Skill 2]", "[Skill 3]"],
      "professional_goals": [
        "Develop expertise in [specific engineering area]",
        "Lead projects in [specific domain]",
        "Transition to [role or specialization]",
        "Improve [specific technical skill]"
      ]
    },
  
    "cognitive_profile": {
      "memory_strengths": [
        "Visual information retention",
        "Conceptual understanding",
        "[Other strength]"
      ],
      "memory_challenges": [
        "Retaining technical specifications",
        "Maintaining focus during debugging",
        "[Other challenge]"
      ],
      "optimal_learning_times": {
        "peak_focus_hours": ["[Time range 1]", "[Time range 2]"],
        "review_periods": ["[Time period 1]", "[Time period 2]"]
      },
      "attention_span": {
        "focused_work": "[Duration]",
        "optimal_break": "[Duration]",
        "daily_capacity": "[Hours] of deep technical work"
      },
      "learning_style_preferences": [
        "Visual learning through diagrams and architecture drawings",
        "Hands-on implementation and experimentation",
        "Conceptual understanding before implementation details",
        "[Other preference]"
      ],
      "problem_solving_approach": {
        "strengths": ["[Approach 1]", "[Approach 2]"],
        "challenges": ["[Challenge 1]", "[Challenge 2]"],
        "preferred_methods": ["[Method 1]", "[Method 2]"]
      }
    },
  
    "technical_environment": {
      "hardware": {
        "development_machine": {
          "processor": "[CPU details]",
          "memory": "[RAM amount]",
          "storage": "[Storage details]",
          "os": "[Operating System and version]"
        },
        "deployment_targets": [
          {
            "name": "[Target environment name]",
            "specifications": "[Hardware specifications]",
            "constraints": ["[Constraint 1]", "[Constraint 2]"]
          }
        ]
      },
      "software": {
        "primary_languages": [
          {
            "name": "[Language name]",
            "proficiency": "[Beginner/Intermediate/Advanced/Expert]",
            "years_experience": "[Number]",
            "preferred_frameworks": ["[Framework 1]", "[Framework 2]"]
          }
        ],
        "secondary_languages": [
          {
            "name": "[Language name]",
            "proficiency": "[Beginner/Intermediate/Advanced/Expert]",
            "context_of_use": "[When you use this language]"
          }
        ],
        "development_tools": {
          "ide": "[Primary IDE]",
          "version_control": "[Git/SVN/etc.]",
          "ci_cd": "[CI/CD tools]",
          "project_management": "[Tools used]",
          "communication": "[Tools used]",
          "testing_frameworks": ["[Framework 1]", "[Framework 2]"]
        },
        "preferred_libraries": {
          "[Category1]": ["[Library 1]", "[Library 2]"],
          "[Category2]": ["[Library 1]", "[Library 2]"]
        },
        "architecture_preferences": {
          "preferred_patterns": ["[Pattern 1]", "[Pattern 2]"],
          "avoided_patterns": ["[Pattern 1]", "[Pattern 2]"],
          "scaling_approach": "[Preferred scaling approach]"
        }
      },
      "resources": {
        "learning_platforms": ["[Platform 1]", "[Platform 2]"],
        "communities": ["[Community 1]", "[Community 2]"],
        "reference_materials": ["[Resource 1]", "[Resource 2]"],
        "mentors": ["[Mentor role/specialty]"]
      }
    },
  
    "current_projects": {
      "main_project": {
        "name": "[Project name]",
        "type": "[Project type]",
        "role": "[Your role]",
        "team_size": "[Number of people]",
        "description": "[Brief description]",
        "technologies": ["[Technology 1]", "[Technology 2]"],
        "current_phase": "[Design/Implementation/Testing/Maintenance]",
        "key_challenges": ["[Challenge 1]", "[Challenge 2]"],
        "technical_constraints": ["[Constraint 1]", "[Constraint 2]"],
        "current_tasks": ["[Task 1]", "[Task 2]"],
        "blockers": ["[Blocker 1]", "[Blocker 2]"],
        "deadlines": {
          "[Milestone1]": "[Date]",
          "[Milestone2]": "[Date]"
        },
        "success_metrics": ["[Metric 1]", "[Metric 2]"]
      },
      "side_projects": [
        {
          "name": "[Project name]",
          "purpose": "[Learning/Portfolio/Open Source Contribution]",
          "status": "[Active/On hold/Planning]",
          "technologies": ["[Technology 1]", "[Technology 2]"],
          "description": "[Brief description]",
          "goals": ["[Goal 1]", "[Goal 2]"]
        }
      ],
      "planned_projects": [
        {
          "concept": "[Brief description]",
          "technologies_to_explore": ["[Technology 1]", "[Technology 2]"],
          "skills_to_develop": ["[Skill 1]", "[Skill 2]"]
        }
      ]
    },
  
    "learning_strategies": {
      "active_recall": {
        "description": "Testing yourself on material to strengthen neural connections",
        "implementation": [
          "Create technical flashcards for APIs and syntax",
          "Implement features without documentation as practice",
          "Explain technical concepts to others or rubber duck debugging",
          "Regularly solve engineering challenges without references"
        ],
        "tools": [
          "Anki for technical concepts",
          "Documentation writing to validate understanding",
          "Engineering journal for problem-solving approaches"
        ]
      },
      "spaced_repetition": {
        "description": "Reviewing information at increasing intervals to optimize retention",
        "implementation": [
          "Review new technical concepts within 24 hours of learning",
          "Schedule follow-up implementation exercises at increasing intervals",
          "Regularly revisit challenging engineering concepts"
        ],
        "tools": [
          "Calendar reminders for concept review",
          "Development log with spaced review tags",
          "Progressive project challenges that build on previous skills"
        ]
      },
      "project_based_learning": {
        "description": "Learning through the development of complete projects",
        "implementation": [
          "Create small, focused projects that emphasize specific skills",
          "Participate in hackathons to practice rapid development",
          "Reverse engineer existing systems to understand implementations",
          "Gradually increase project complexity as skills improve"
        ],
        "tools": [
          "GitHub repositories for learning projects",
          "Project templates for quick starts",
          "Portfolio tracking system for completed projects"
        ]
      },
      "deliberate_practice": {
        "description": "Focused, structured practice on specific skill components",
        "implementation": [
          "Identify weakest technical skills and create targeted exercises",
          "Seek immediate feedback through code reviews",
          "Time-box challenging tasks to maintain engagement",
          "Analyze successful architectures to extract design patterns"
        ],
        "tools": [
          "Skill assessment rubrics",
          "Feedback collection templates",
          "Practice exercise library"
        ]
      },
      "knowledge_integration": {
        "description": "Connecting engineering concepts across disciplines",
        "implementation": [
          "Create relationship maps between different technical domains",
          "Implement features that require cross-discipline understanding",
          "Analyze how changes in one system affect other systems",
          "Document design patterns and their technical implementations"
        ],
        "tools": [
          "Mind mapping software",
          "System interaction diagrams",
          "Architecture decision records (ADRs)"
        ]
      }
    },
  
    "engineering_approach": {
      "design_philosophy": {
        "principles": ["[Principle 1]", "[Principle 2]"],
        "preferred_methodologies": ["[Methodology 1]", "[Methodology 2]"],
        "trade_off_approach": "[How you handle engineering trade-offs]"
      },
      "quality_focus": {
        "top_priorities": ["[Priority 1]", "[Priority 2]"],
        "testing_approach": "[Approach to testing]",
        "code_review_practices": "[Your code review practices]",
        "technical_debt_philosophy": "[How you approach technical debt]"
      },
      "productivity_systems": {
        "time_management": "[Your approach]",
        "task_prioritization": "[Your method]",
        "focus_techniques": ["[Technique 1]", "[Technique 2]"],
        "workflow_optimization": "[How you optimize workflow]"
      },
      "communication_style": {
        "documentation_preferences": "[Your documentation approach]",
        "collaboration_methods": ["[Method 1]", "[Method 2]"],
        "knowledge_sharing": "[How you share knowledge]"
      }
    },
  
    "skill_inventory": {
      "programming_languages": [
        {
          "name": "[Language name]",
          "proficiency": "[Beginner/Intermediate/Advanced/Expert]",
          "years_experience": "[Number]",
          "strengths": ["[Strength 1]", "[Strength 2]"],
          "areas_to_improve": ["[Area 1]", "[Area 2]"]
        }
      ],
      "frameworks_and_libraries": [
        {
          "name": "[Framework/Library name]",
          "proficiency": "[Beginner/Intermediate/Advanced/Expert]",
          "use_cases": ["[Use Case 1]", "[Use Case 2]"]
        }
      ],
      "tools_and_platforms": [
        {
          "category": "[Category name]",
          "tools": [
            {
              "name": "[Tool name]",
              "proficiency": "[Beginner/Intermediate/Advanced/Expert]",
              "frequency_of_use": "[Daily/Weekly/Monthly/Rarely]"
            }
          ]
        }
      ],
      "soft_skills": [
        {
          "category": "[Category name]",
          "skills": [
            {
              "name": "[Skill name]",
              "self_assessment": "[Beginner/Intermediate/Advanced/Expert]",
              "development_focus": "[Yes/No]"
            }
          ]
        }
      ],
      "domain_knowledge": [
        {
          "domain": "[Domain name]",
          "depth": "[Superficial/Working Knowledge/Deep Understanding/Expert]",
          "application_context": "[Where you apply this knowledge]"
        }
      ]
    },
  
    "ai_integration": {
      "ai_strengths_for_engineering": [
        "Providing alternative implementations for technical problems",
        "Suggesting optimization strategies for performance bottlenecks",
        "Explaining complex algorithms and design patterns",
        "Generating ideas for system architecture and approaches",
        "Helping debug challenging code issues"
      ],
      "ai_limitations": {
        "context_limitations": {
          "description": "LLMs have a limited context window (working memory)",
          "implications": [
            "Cannot maintain awareness of entire codebase or system architecture",
            "May miss connections between separate systems or modules",
            "Needs regular updates on project changes and constraints"
          ],
          "mitigation": [
            "Regularly update this context file with project progress",
            "Provide focused, well-scoped questions about specific systems",
            "Include relevant code snippets when discussing technical issues"
          ]
        },
        "technical_understanding": {
          "description": "AI may not understand specific implementation details or edge cases",
          "implications": [
            "Suggestions may not align with your specific constraints",
            "May not account for performance characteristics of target platforms",
            "Cannot directly test or run code to verify suggestions"
          ],
          "mitigation": [
            "Provide platform constraints and specifications",
            "Test AI suggestions in isolated environments before integration",
            "Share results of implementation attempts for iterative improvement"
          ]
        },
        "outdated_knowledge": {
          "description": "AI may not be aware of the latest technologies, libraries, or best practices",
          "implications": [
            "Suggestions might not leverage cutting-edge approaches",
            "May recommend deprecated methods or libraries",
            "Could miss recent security considerations"
          ],
          "mitigation": [
            "Specify version information for technologies discussed",
            "Cross-reference suggestions with current documentation",
            "Update context with information about newest technologies you're using"
          ]
        }
      },
      "effective_prompting": {
        "technical_prompts": [
          "Suggest alternative implementations for [specific functionality] that would improve [performance/readability/maintainability]",
          "Help me debug this [error/performance issue] in my [system/component]: [code snippet]",
          "Explain how [algorithm/pattern] works and how I could implement it in [language/framework]",
          "What are the trade-offs between [approach A] and [approach B] for implementing [feature]?"
        ],
        "design_prompts": [
          "Analyze this system architecture from the perspective of [scalability/maintainability/security]",
          "Generate variations of [architecture/design] that could address [specific constraint]",
          "How might I refactor [component] to avoid [design problem]?",
          "What are potential failure modes from the interaction between [system A] and [system B]?"
        ],
        "learning_prompts": [
          "Create a learning path for mastering [skill] in [language/framework]",
          "What fundamentals should I understand before attempting to implement [advanced feature]?",
          "Suggest small practice projects that would help me improve at [specific skill]",
          "Explain [complex concept] using analogies from engineering domains I'm familiar with"
        ],
        "mental_model_prompts": [
          "Apply systems thinking to analyze how [component] interacts with the broader system",
          "Use first principles reasoning to approach [engineering problem]",
          "Apply second-order thinking to evaluate the long-term implications of [technical decision]",
          "Use inversion to identify potential failure modes in [system design]"
        ]
      }
    },
  
    "learning_progress": {
      "current_focus": {
        "topic": "[Current learning focus]",
        "resources": ["[Resource 1]", "[Resource 2]"],
        "started": "[Start date]",
        "target_completion": "[Target date]",
        "key_milestones": [
          {
            "milestone": "[Milestone 1]",
            "status": "completed/in progress/planned",
            "notes": "[Any observations or insights]"
          }
        ]
      },
      "completed_topics": [
        {
          "topic": "[Completed topic]",
          "completion_date": "[Date]",
          "mastery_level": "basic/intermediate/advanced",
          "key_insights": ["[Insight 1]", "[Insight 2]"],
          "projects_applied_to": ["[Project 1]", "[Project 2]"],
          "areas_for_review": ["[Area 1]", "[Area 2]"]
        }
      ],
      "skill_development": {
        "technical_skills": [
          {
            "skill": "[Skill name]",
            "current_level": "beginner/intermediate/advanced/expert",
            "target_level": "intermediate/advanced/expert",
            "progress_notes": "[Notes on progress]",
            "resources_used": ["[Resource 1]", "[Resource 2]"]
          }
        ],
        "soft_skills": [
          {
            "skill": "[Skill name]",
            "current_level": "beginner/intermediate/advanced/expert",
            "target_level": "intermediate/advanced/expert",
            "progress_notes": "[Notes on progress]",
            "application_contexts": ["[Context 1]", "[Context 2]"]
          }
        ]
      },
      "knowledge_connections": [
        {
          "topics": ["[Topic A]", "[Topic B]"],
          "relationship": "[How these topics connect]",
          "application": "[How this connection is useful in engineering]"
        }
      ],
      "career_progression": {
        "current_level": "[Current career level]",
        "target_level": "[Target level]",
        "skills_needed": ["[Skill 1]", "[Skill 2]"],
        "experience_needed": ["[Experience 1]", "[Experience 2]"],
        "timeline": "[Expected timeline]",
        "mentorship_needs": ["[Need 1]", "[Need 2]"]
      }
    },
  
    "metadata": {
      "version": "1.0",
      "created": "2025-05-01",
      "last_updated": "2025-05-01",
      "update_history": [
        {
          "date": "2025-05-01",
          "changes": "Initial creation",
          "updated_by": "User"
        }
      ]
    }
  }